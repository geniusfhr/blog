---
layout: post
title:  "规划模型"
date:   2016-3-25
categories:  mcm
author: 方浩然
header-img: "img/post-bg-unix.jpg"
---



# 规划模型之 ---- 平板车装货问题
> 第一题平板车问题是一个标准的规划问题，目的是求的两辆平板车上货物厚度的最大值（`目标函数`），同时，对货物的数量（`决策变量`）做了一些约束，比如每辆车总重不能超过4t，567三种货物的厚度不能超限（`非线性约束条件`）。这样一个标准的规划模型就可以建立了。按照题意我们用lingo内置的建模语言写出表达式，让`lingo`帮我们找出最优解，从而完成题目的求解。

```j
!Lingo代码;
model:
sets:
box/b1..b7/:n,w,t;         ! n--数量 w—重量 t—厚度;
car/c1..c2/;               !两辆车;
links(car,box):x;           !派生集 默认对父集进行组合  x(i,j)表示第i辆车第i种货物的数量;
endsets

!目标函数;
max = @sum(cars(i):
    @sum(box(j):x(i,j) * t(j)));

!数量约束;
@for(box(j):
    @sum(car(i):x(i,j))< n(j));
!对每辆车的重量约束;
@for(cars(i):
    @sum(box(j):x(i,j) * w(j)) < 40000);
!对每辆车的长度约束;
@for(cars(i):                            
    @sum(box(j):x(i,j) * t(j)) < 1020);
!对每辆车 567的厚度约束。这里可能会有两种理解，302.7 是对两辆车567箱子总厚度的约束&&对每辆车的约束;
@for(cars(i):            
    @sum(box(j)|j#gt#4:x(i,j) * t(j)) < 302.7);
!整数约束;
@for(links:@gin(x));

data:
t = 48.7,53,61.3,72,48.7,52,64;
w = 2000,3000,1000,500,4000,2000,1000;
n = 8 7 9 6 6 4 8;
enddata

end
```

### 计算结果
1. 对于每辆车567箱的限制 的计算结果

```
X( C1, B1)        3.000000           
X( C1, B2)        2.000000           
X( C1, B3)        3.000000           
X( C1, B4)        4.000000          
X( C1, B5)        0.000000          
X( C1, B6)        2.000000           
X( C1, B7)        3.000000           
X( C2, B1)        4.000000           
X( C2, B2)        4.000000           
X( C2, B3)        4.000000           
X( C2, B4)        1.000000           
X( C2, B5)        0.000000           
X( C2, B6)        2.000000           
X( C2, B7)        3.000000           

```

2. 对于567三种两辆车总厚度的限制 的计算结果

```
X( C1, B1)        6.000000           
X( C1, B2)        5.000000           
X( C1, B3)        2.000000           
X( C1, B4)        4.000000           
X( C1, B5)        0.000000           
X( C1, B6)        1.000000           
X( C1, B7)        0.000000          
X( C2, B1)        2.000000          
X( C2, B2)        2.000000          
X( C2, B3)        7.000000          
X( C2, B4)        2.000000       
X( C2, B5)        5.000000         
X( C2, B6)        0.000000          
X( C2, B7)        0.000000        

```

### 对于lingo建模语言的一点体会
因为我是计算机专业，对于语言可能有种特殊的感情~`lingo`很接近数学语言，表达很直观，但是可能缺少了编程语言如java c cpp的严谨和可读性。后来适应了一段时间，感觉还是比较简单的。觉得最重要的就是对于集合循环函数的认识。  

```
@for(setname(index)|filter:expression);
@sum(setname(index)|filter:expression);
```

 `@sum`和`@for`是最常见的集循环函数，对于集合中的索引变量从1开始直到结束，对于满足filter过滤器的当前索引执行冒号后面的表达式。

 上述代码中的

```
 links(car,box):x;
```

links是一个派生集合，没有过滤器的时候自动生成稠密集，对于car和box进行一一组合，这样对于x属性的描述需要(i,j)这样来明确。

```
@for(links:@gin(x));
```

gin是对links中的x做整数约束，这里省略了links中的下标，默认表示对links中所有的x做约束。

--------------------------------------------------------------------------------

# 规划模型之 ---- 展厅监控问题
> 展厅监控问题是一个非常有意思。对十三个通道放置监控摄像头，每个摄像头可以监控到两边的展厅。求在哪里放置摄像头能监控到所有的展厅，并且用的摄像头数目最少。我们将它归类到01规划模型中。我们的决策变量是13个摄像头，1表示放置，0表示不放置。按照题意，8个展厅每个展厅都要能被监控到，也就是说至少有一个摄像头能够监控当前展厅。这样，我们的约束方程自然就可以写出来了。对每个展厅的摄像头求和，为了保证能监控到，所以和必须要大于等于1。

```
model:
sets:
street/1..13/:x;
endsets
!目标方程;
min = @sum(camera(i):x(i));
!约束方程;
x(1)+ x(4) + x(6) >= 1;
x(6) + x(8) + x(12) >= 1;
x(1) + x(2) + x(3) >= 1;
x(3) + x(4) + x(5) + x(7) >= 1;
x(7) + x(8) + x(9) + x(10) >= 1;
x(10) + x(12) + x(13) >= 1;
x(3) + x(5) + x(9) + x(11) >= 1;
x(11) + x(13) >= 1;
!对x进行01约束
@for(camera:@bin(x));
end

```

lingo代码很简单，求得的结果为x(3)=x(6)=x(10)=x(11)=1 也就是说在3 6 10 11这四个点放置摄像头就可以监控到所有8个展厅。最小值是4。但是这四个点是唯一最优解吗？我们可以尝试着将这组解作为约束条件，尝试限制lingo来得到其他的解。

```
x(3)+x(6)+x(10)+x(11) < 3

```

比如这样就限制了当前的解。得到第二组解 3 6 9 13。再讲 3 6 8 19 作为约束条件加入，得到第三组解。以此类推。

```
x(3) x(6) x(9) x(13)  
x(3) x(6) x(10) x(11)  
x(1) x(7) x(11) x(12)
x(1) x(5) x(8) x(13)
x(2) x(4) x(8) x(13)
x(2) x(6) x(7) x(13)  
```

通过不断限制方程的最优解来迫使lingo输出其他最优解，这样达到输出多个解的目的。
