---
layout: post
title:  "再谈策略模式"
date:   2016-3-5 21:00
author: 方浩然
header-img: "img/tags-bg.jpg"
categories: Strategy
---


&nbsp;&nbsp;&nbsp;&nbsp;很凑巧，在`《head first设计模式》`深入浅出系列的第一章讲的就是策略模式。让我对其有了更深刻的认识。记录之。


&nbsp;&nbsp;&nbsp;&nbsp;考虑这样一个情况。我们需要描述一些鸭子类。黑鸭子，白鸭子等，鸭子都会游泳，都会叫，都会飞。每种鸭子游泳的方法是一样的，为了代码复用，我们可以抽象出`Duck`父类，具有游泳`swim()`和飞`fly()`的具体方法，然而每种鸭子的叫可能不一样，所以叫的方法可以写成一个Abstract的抽象方法，在子类中分别实现这个方法。但是有一种鸭子是橡皮鸭，我们通过继承父类Duck来得到鸭子的一些公共方法，但是存在一个严重的问题就是这个鸭子虽然（几乎）具有Duck全部的特点，但是它不会飞。fly方法在橡皮鸭类中需要被覆盖。要让橡皮鸭执行飞的命令，它应该说我不会飞，或者抛出一个异常等等。覆盖这个解决方法的缺点在于，如果有新的鸭子种类需要创建，某些在Duck中鸭子公共具有的方法不需要被继承，那么每个方法都要覆盖一遍，这显然不是一个好的方案，看起来很别扭。于是我们想到了使用interface接口。把飞的方法封装进一个接口，会飞的鸭子就去实现这个接口。但是新的问题来了，接口只是一种规范，它的方法只能是抽象的，于是我们需要在每个会飞的子类中重复实现这个飞的方法。每个鸭子飞都是一样的，所以这么做简直是太愚蠢了，虽然解决了上述问题。 Java不允许使用多继承，所以将fly封装成类的方法也被pass掉。因为这样做就不能继承Duck了。Duck才是最重要的，也是唯一的父类。  


&nbsp;&nbsp;&nbsp;&nbsp;飞对于鸭子来说是一个很棘手的方法，有的鸭子不会飞，但是还是有大量的鸭子会飞，不会飞的就不能叫鸭子吗？它仍然具有大多数鸭子具有的特点，所以应该继承Duck。那么Duck里的fly又该怎么处理（考虑到其他子类鸭子fly()的向上抽象）。所以应该有一种完美的设计能够处理这个问题。策略模式的核心在于将动态的部分分离出去。我们构造Flyable接口封装fly方法。然后分别构造`FlyWithWings`类，用翅膀飞，和`FlyNoWay`，飞的时候什么都不能做这两个实体类来处理飞这个问题。分别实现flyable接口，这样每个飞的方法就有他们的实体类。我们用组合来代替继承，多态是实现这个步骤的核心手段。在Duck父类中，我们持有一个接口`Flyable`的引用（策略），通过抽象的策略接口来和Duck交互。接着在Duck的方法中我们增加一个myFly的方法，通过这个接口引用变量的多态性来处理。myFly方法中我们使用接口变量，不去关心真正的对象类型，只需要对它下达飞的命令，这样在运行时就会动态绑定到相应的`FlyWithWing`或`FlyNoWay`对象中，完成具体fly方法的调用。这个持有接口(策略)的过程就是`组合``Composition`。通过持有的策略接口来完成交互，让fly方法在调用的时候更有弹性，能够真正调用到具体策略中。我们对接口变量的赋值可以在构造函数中进行，或者直接增加一个赋值的方法来set。  
扩展性体现在，如果新出现了一种游戏中的鸭子具有超能力，那么可以增加一个实例类来实现Flyable接口。组合的使用--接口在Duck中的相关代码完全不需要动。  


&nbsp;&nbsp;&nbsp;&nbsp;策略模式把具体的方法外包成具体的类来处理，只写关于接口的代码。把接口嵌入环境，使用组合，这样有效地避免了继承带来的缺点，（有些方法的强制继承会造成矛盾）。那么我们顺水推舟，将他分离出去，抽象成接口，把接口再组合进父类，利用这个接口的多态性，我们仍然可以让java自动地帮我们完成具体方法的调用。最终完成解耦。
