---
layout: post
title:  "我所理解的编程"
date:   2016-4-2 18:14:00 +0800
author: 方浩然
categories: programming
header-img: "img/tags-bg.jpg"
---

## 我所理解的编程

&nbsp;&nbsp;&nbsp;&nbsp;这个话题已经酝酿多时了。每次想法快要喷涌而出的时候，总在不经意间又有新的东西让我困惑一段时间。这就是前辈们说的成长吗。上周去打了ACM校赛，之前一直没有练过这种，所以没有太在意结果。比赛前几天刷了三十道PAT，确实是有一些收获的。对于算法也有了更深刻的认识。

&nbsp;&nbsp;&nbsp;&nbsp;从大一开始学习编程，C、C++ 面向对象，数据结构和算法，这些专业基础课，折腾Linux，github，pages博客，markdown，前端，php web开发，做简单留言板,到了大二上学期跟楼总还有实验室的学长一起搞安卓，Java，设计模式，数据结构课程设计做校园导航，整个过程，编码能力一直有在提升。当然还有最近的数学建模，Python的三个科学计算库。我的每一天几乎都离不开代码。走了一些弯路，踩过不少坑。也对编程有了自己的一些理解。

&nbsp;&nbsp;&nbsp;&nbsp;编程和写作很像，编程语言就像是我们笔下的汉字，每个字都有自己的表达。我们的目标就是将代码组织起来，能被编译器（解释器）编译/解释给计算机，利用计算机的高速计算能力，为我们干活。这种代码的组织能力我觉得就是大家一直提到的编程能力。这种能力的培养和写作是很相似的，要大量阅读别人写的文章，不断地模仿，总结，才能得到提高。

&nbsp;&nbsp;&nbsp;&nbsp;编码的难处在于抽象。计算机是只懂得0101这样的二进制，CPU芯片根据指令集来完成整个系统的调度。程序员去写0101这样的二进制代码显然是极其困难的，而且有大量重复的工作，代码几乎是不可维护的，于是向上抽象，发明汇编语言，通过汇编语言来写程序，汇编器翻译成机器码。汇编语言相比于机器语言，可读性和表达性大大增强，减少重复的劳动，这样可以更加专注于程序本身所要表达的逻辑，而不是被复杂的机器语言拖累。高级语言如C、C++的发明是对汇编语言的进一步抽象。相应编译器将高级语言编译成汇编代码，再利用汇编程序编译成机器语言,让机器执行。这里解决了一个痛点，每个厂商都有自己机器的规范，这就造成了汇编语言的可移植性差，intel x86的机器和IBM的机器可能执行的指令就不一样，相应的汇编程序也要更改才能移植到其他机器上运行。高级语言的是对汇编的又一层抽象，语言的表达力更强，更贴近自然语言，需要程序员处理的东西也大大减少，真正从繁重的内存管理调度中解放出来，集中于程序逻辑的编写，而不是面对机器编程。这样一层一层的封装，好处显而易见，但是弊端就是编程者不了解底层实现，一旦代码出了错（虽然概率很低），很难发现真正错在什么地方。这就相当于买了一台电视机，插上电打开按钮就可以播放，但是一旦坏了自己就不会修了。但是如果是修电视的师傅，了解整个电视机的组成原理，运作过程，有很多经验，就能通过电视机坏的现象判断出哪里坏了，应该怎么修。至于每种高级语言都有自己的一套完善的体系被编译成底层代码给机器执行，这就是程序语言设计者该关心的东西了。例如Java程序被编译成字节码后，是通过一个虚拟机运行的。

&nbsp;&nbsp;&nbsp;&nbsp;编程到底在编什么，什么才算真正的编程能力。个人认为，这和口才很像，说话是一门艺术，编程也是。按照一定的语法规则组织代码，当代码量巨大的时候，会变得难以维护。就像让你写一篇十万字的文章，肯定要事先仔细构思好，会有一个段落划分，每个部分应该围绕哪个主题。围绕着一条主线，加上几条辅线，回到文章本身，甚至每一段应该写多少字，留多少空格才方便以后修改批注。深入到每个句子之后，是用排比句还是比喻句。这也是要慢慢思考的。所以编码的时候，一定要有清晰的逻辑。你自己都不知道自己在写什么，更不要指望计算机能知道了。在小范围的编码中，例如一个函数，怎样写才能更清晰地表达要做的事情，这就是程序员的能力体现了。其中会涉及到数学相关的数值计算，如辗转相除法，也还需要具备一定的数学能力。而且我之前困惑的一直就是这里。

&nbsp;&nbsp;&nbsp;&nbsp;ACM竞赛几乎完全是算法和语言技巧，需要大量的练习，不断地踩坑，才能换来对语法的熟练掌握，对算法的精通。但是会牺牲掉很多时间。我从一开始就不选择这个的原因是这个练习的过程于我而言太单调了，我讨厌这样反复的练习来打磨自己对问题的解决能力。这也就是我一直怀疑自己是不是错了的地方。更喜欢去接触一些新的东西，在实际项目编码的过程中，对类库的使用，怎样更加合理，怎样组织代码能提高运行的效率，扩展性，可读性，怎样使用缓存，怎样命名，到了真正需要核心算法的地方（实际上很少，都有标准的封装）再去处理相关的问题。项目驱动能让我保持对代码持久的兴趣，对技术的不断追求。

&nbsp;&nbsp;&nbsp;&nbsp;在PAT的刷题过程中，确实体会到了对语言细节驾驭能力的重要性。我觉得自己的编码能力进步最快的一段时间是在上学期学数据结构的时候。每种数据结构及其相应操作用C实现了两遍，加上经典的排序和查找。这种造轮子的感觉很神奇，虽然是小东西，但是会带来很强烈的成就感。（代码复用的魅力应该也就在此吧）。能够对每个语法了然于胸，加上一些华丽的技巧。

&nbsp;&nbsp;&nbsp;&nbsp;编程语言是一种工具，但是也只有熟练掌握了工具才可以完成自己想做的事情。因为建模我接触到了Python，Python很朴实很规范的语法强烈地吸引了我。很快地上手语法，再去了解了numpy和scipy这两个科学计算库，matplotlib画图库，就可以开始干活了。我想这就是编程对我而言最重要的意义。相比较于非计算机专业学生，自然对语言有更好的理解能力和使用能力。可以用代码完成自己想要做的事情，数据分析，绘图，开发应用，不是一件很酷的事情吗。

&nbsp;&nbsp;&nbsp;&nbsp;Python网络编程也很吸引我，不过还是觉得最近这段时间还是应该静心去读计算机网络，TCP/IP协议，以及计算机组成原理，打好扎实的基础。毕竟这才是计算机科学的根本，是内功。

&nbsp;&nbsp;&nbsp;&nbsp;写了这么多，还有许许多多想表达，可能是我真的很喜欢编程，才会想说这么多话。同时，也会一直在我所理解的编程路上，坚定走下去。
